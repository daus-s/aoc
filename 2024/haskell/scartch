readInstructions :: String -> [Int]
readInstructions string =
  if restIsJust
    then mult (breakOperands restOfString) : readInstructions restOfString
    else readInstructions restOfString
  where
    (restIsJust, restOfString) =
      case stripPrefix "mul(" string of
        Just something -> (True, something)
        Nothing -> (False, undefined)

breakOperands :: String -> Maybe (Int, Int)
breakOperands s = strSplit (fst (strSplit ")" s) ",")

mult :: (Int, Int) -> Int
mult (x, y) = x * y